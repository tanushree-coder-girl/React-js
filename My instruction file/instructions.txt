------------- React Js From Beginer To Advanced ----------

1. Introduction 
    React js is a JavaScript library for building user interfaces.
    React is used to build single page applications. 
    React Allows us to create reusable bit of code/components. 
    React Was build By facebook. 
    The main focus is to building UI as fast as possible. 
    React Uses Virtual DOM. 
    React Runs on Default port localhost:3000 
    First Released on 29th may 2013. 

2. prerequisite before learn react js
    Before you can code using React, you must have basic knowledge of :
    1) HTML 
    2) CSS 
    3) JavaScript 
    4) ES6 
    5) NPM or YARN 

    Note => Node Js And Npm Must Be installed in your pc to getting started with react. 
    Also git bash should be installed.

3. CMD basics commands or NPM basics commands 
    let's discuss some important cmd or npm commands 
    1) CMD commands 
        1. PWD
            full pathname of working directory 
        2. LS 
            list of directory 
        3. MKDIR 
            create directory 
        4. CD 
            change directory 
        5. CD..
            one level up directory 
        6. clear 
            clean the terminal 
        7. Arrow key up / down 
            previous commands 
        
    2) NPM commands 
        1. NPM init 
            create package.json file 
        2. Npm install <package-name> --save 
            Install package locally 
        3. npm install <package-name> -g 
            install package globaally (sudo)
        4. npm install <package-name> --save-dev 
            use only in development mode 
    
4. React js without installation using cdn links  
    Add Links in Head Tags 
    <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>

    Now in Script you can write React like this-
    
    <script type="text/babel">
        function App (){
            return ( <h2> Hello world </h2>);
        }
        ReactDOM.render(<App />, document.getElementById('root'))
    </script>

    Note => This way is not for project development this is only for learning purpose 
    for use of project we will use create-react-app installation process. 
    CDN Links is not Recommended this is only for testing purpose. 

5. React Js installation (create-react-app) 
    For install globally create react app command 
    npm install -g create-react-app 

    for checking version installed in your pc use 
    create-react-app --version 

    create a react app directly 
    create a directory inside your working folder run create app command for create an react app like: 

    npx create-react-app ecommerce-app 
    cd ecommerce-app 
    yarn start 

    it will create a react app names as ecommerce-app 
    by yarn start 
    it will start serve on localhost:3000 

6. File Structure 
    1) Node Modules 
        node Modules contain all the required packages. 
    2) Public Folder 
        public folder contain a root html file. (index.html) and favicons etc. 
        starting Public file =>         public/index.html
    3) src Folder 
        src folder is our main folder where we will start our works 
        All Logic Files Comes Inside This Folder . 
        We will write our code in src folder. 
        starting logic file is =>       src/index.js
    4) .gitignore
        this file is used to ignore file when push code on github 
    5) package.json 
        it contains all required dependency and versions. 
    6) README.md 
        it is just a text file used for github code push.
    7) yarn.lock  
       it contains all required dependency and versions in packages information in detail.
    
7. Clean Boiler plate and understanding main logic file which is src/index.js
    delete all files in public folder except index.html 
    now in index.html files remove all unnecessary comments and unneceesary links tag. 
    inside index.html file there is a div with id root 
     
        <div id="root">
        
        </div>

    now delete all files in src folder 

    now we need a main logic file inside our src folder which is index.js 
    so create index.js inside src folder. 
    this is our main logic file . 

    src/index.js

            //1. import area 
            //Formula :
            //import something from 'something';
            import React from 'react';
            import ReactDOM from 'react-dom';

            //2. components area 
            function App(){
                return <h1> Hello world</h1>
            }

            //3. object.method 
            ReactDOM.render( <App />, document.getElementById('root'));

            note: this document.getElementById('root') root comes from public/index.html file.

8. Components In React 
    1. Components Are independent and reusable Bit of Code.
    2. Components always return JSX (html).
    3. It only return single element.
    4. Components Name must be in pascal case as PascalCase
    5. We don't want to mash all the code in one file. that's y we create separate components .
    
    There are mainly two types of components 
    1) Functional components or Arrow Functional components 
    2) Class components 

        1) Functional Components 
            Functional components functions s bnte s 
            and it always return jsx. 

        for example Functional component 
        now create a componets App.js

            function App(){
                return <h1> Hello world</h1>
            }
            export default App;

        and import this code in index.js file 

            import App from './App';
            ReactDOM.render( <App />, document.getElementById('root'));

        for example Arrow Functional Components 
            const App = () => {
                return <h1> Hello world</h1>
            }
            export default App;

            if return only single element then no need to write return keyword in arrow function. 
             const App = () => <h1> Hello world</h1>
            export default App;

        2) Class Components 
            class components class s bnte h. 
            there must be a render method in class component 
            render method always return JSX (html)

                class App extends React.Component {
                    render(){
                        return (
                            <h1> Hello world</h1>
                        );
                    }
                }
                export default App;

            If using Constructor then there must be called super method . 
                class App extends React.Component {
                    constructor (){
                        super();
                        console.log('hello i am construtor')
                    }
                    render(){
                        return (
                            <h1> Hello world</h1>
                        );
                    }
                }
                export default App;

9. Nested Components And Import And Export 
    Components Can contain Other Components as parent child this is called Nested Components.
        for create components create a separate components folder inside src folder
        and keep all your components in separate components folder 

        //Nested  Components Example 

        function One () {
            return (
                <div>
                    <h1>I am One</h1>
                    <Two />                 //this is called nested components
                </div>
            );
        }

        function Two(){
            return (
                <div>
                    <h1>I am Two</h1>
                </div>
            );
        }

        export default One;

        Import And Export---

        1) Default Export ko kisi bhi name s import kar skte hai 
        for example 
            export default Home; 
            now import in another page as
            import HomePage from './Home'; 

            use this component like 
            <HomePage />
                or 
            also use like 
            <HomePage></HomePage> 

        2) Named Export ko curly braces m same name s likh k access kia jata h 
        for example 
            export { Home };
            now import in another page as 
            import { Home } from './Home';   

            use this component like 
            <Home />   
                or 
            also use like 
            <Home></Home> 

10. JSX 
    JavaScript And XML (extensible markup language)
    Rules= 
        1. Must contain A closing Tag of all element.
            example
            <img src="" alt >               //this is wrong we can not use this
            <img src="" alt="" />           //this is right bcoz it have closing tag

        2. return single element like div , section, article, react fragment or <></>
            example 
                //This is Wrong we can only return single element 
                function AboutJsx() {
                    return (
                        <h1>Hello jsx</h1>
                        <h2>Welcome</h2>
                    )
                }

                //This is Right we can only return single element 
                function AboutJsx() {
                    return (
                        <React.Fragment>
                            <h1>Hello jsx</h1>
                            <h2>Welcome</h2>
                        </React.Fragment>
                   )
                }

                //one parent inside a parent there must be so many element
                // we can wrap all with <div></div>
                 or <React.Fragment></React.Fragment>
                 or syntactic sugar form of react fragment is 
                 <> all element inside it </>

            What is React Fragment 
                A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra div to the DOM.
                
        3. use camelCase for Html attribute 
            for example 
            <button onclick="alert('hello ')"> Click Me</button>        //wrong
            <button onclick={ alert('hello')}> Click Me</button>        //right

        4. className instead of class. 
            <h1 class="heading">Helloo</h1>             //wrong
            <h1 className="heading">Helloo</h1>         //right

        5. react internally uses JSX which uses babel to convert js.
        6. JSX means write Html and js together. 
        7. Write JavaScript inside expressions which is curly braces { 5 + 5 }

        practical on file => src/components/AboutJsx.js

11. Events In JavaScript 
    React can perform action based on user events. 
    React has the same events as html onClick, onChange, onMouseEnter , onDoubleClick etc.
    React Events are written in camelCase syntx. 
    React Event Handlers are written inside curly braces.
        for example 

        const sendData = () => {
            alert('button is clicked');
        }

        <button onclick={ sendData }> Click Me </button>
            or 
        <button onClick={()=>sendData()}> Click Me </button>
            or 
        <button onClick={()=>alert('button is clicked')}> Click Me </button>

        practical on file => src/components/Events.js

12. Props and state in functional components 
    Props are arguements / parameterd passed into react component. 
    Props are used to pass data from a parent component to child component.
    Props are read only.
    props is immutable.

    example of props in functional components are- 
        const Cards = (props) => {
            return (
                <div>
                    <h1>name : {props.name} </h1>
                    <h2>Email : {props.email}</h2>
                </div>
            )
        }
        export default Cards;

        {/* props */}
        <Cards name={'xyz'} email={'xuz@gmail.com'}/>
        <Cards name={'rim'} email={'rim@gmail.com'}/>

    State Data can be modified by its own component. but its private cannot be accessed from outside.
    when state change the comnponent re-render.
    state is mutable.

    example of state in functional components
        using hook useState 

        import React, {useState} from 'react';

        function MyComp () {
            const [count, setCount] = useState(0);

            return (
                <>
                    <h1> { count }</h1>
                    <button onClick={()=> setCount(count + 1)}> Update Num</button>
                </>
            );
        }
        export default MyComp;

    practically on file => src/components/PropStateFunctionalComp.js

13. Props and state in class components 
        example of props in class components are- 

            export default class PropStateClassComp extends Component {
                render(){
                    console.log(this.props);
                    return (
                        <h1>name : {this.props.name} </h1>
                        <h2>Email : {this.props.email}</h2>
                    );
                }
            }

            {/* props in class component */}
            <PropStateClassComp  name={'xyz'} email={'xuz@gmail.com'} />
            <PropStateClassComp  name={'1234567'} email={'chawin@gmail.com'} />

        example of state in class components
            export default class PropStateClassComp extends Component {
                constructor(){
                    super();
                    this.state = {
                        count : 0
                    }
                }
                render(){
                    return (
                        <h1> {this.state.count} </h1>
                        <button onClick={()=> this.setState({ count : this.state.count+1})}> increment Num</button>
                    );
                }
            }
     practically on file => src/components/PropStateFunctionalComp.js

14. Conditional Statements or ternary operator 
    check if else Conditional using ternary operator like 

        const [isLoggedIn, setisLoggedIn] = useState(false)
        return (
            {
                isLoggedIn ? <h1> Welcome To Dashboard </h1> : <h1> kindly login </h1>
            }
        );

     practically on file => src/components/Conditional.js

15. Form Handling in React 
    Just like in HTML, React Uses forms to allow users to interact with the web page.

    for get value of input box we uses onChange event 
    for storing value we use useState
    for example => 

    const [inputValue, setInputValue] = useState(null);
    <input type="text" onChange={ (event)=>setInputValue(event.target.value)} value={inputValue} />


    2) Print Value onSubmit form--

        import { useState } from 'react'

        export default function Form() {
            const [email, setemail] = useState('');
            const [password, setpassword] = useState('');

            const [showData, setShowData] = useState({emailAdd:'', mypassword:''})

            // stop form from submit on button click 
            const onSubmitForm = (event) => {
                event.preventDefault();
            }

            //show data on submit when button clicked
            const submittedData = () => {
                setShowData({
                    emailAdd: email,
                    mypassword : password
                })
                setpassword('')
                setemail('')
            }
            return (
                <>
                    <h1>Your email is {showData.emailAdd} and password is {showData.mypassword}</h1>

                    <form onSubmit={ onSubmitForm}>
                        <label htmlFor="email"> User Email</label>
                        <input type="email" id="email" onChange={(e)=>setemail(e.target.value)} value={email} />
                        <label htmlFor="password">Password</label>
                        <input type="password" id="password" onChange={(e)=>setpassword(e.target.value)} value={password}/>
                        <button onClick={submittedData}>submit</button>
                    </form>
                </>
            )
        }

    3)Complex Form Multiple field
        Use only One State Varaibles To manage All input field.

        See file ComplexForm.js 
        src/components/ComplexForm.js 
        for know in details about complex form Handling

    practically on file => src/components/Form.js
    practically on file => src/components/ComplexForm.js

16. React LifeCycle Method .
    React LifeCycle Method is use with class Components only. 
    Each component in react has a different lifecycles method which you can monitor during its three phases.

    The three phases are- 
    1) Mounting 
    2) Updating 
    3) Unmounting 

        1) Mounting => Mounting means putting elements into the dom.
        react has 4 built in methods that gets called , in this order when mounting a components. 
            1) constructor()
            2) getDerivedStateFromProps() 
            3) render()
            4) componentDidMount() 

                1) constructor
                    A method to initialize the property or state Varaibles. 
                    Constructor is called one time before the view is rendered . 
                    It is not mandatory to take the controller in class component.
                    Must Call Super() method in constructor 

                    constructor (){
                        super();
                        console.log('constructor called before view is rendered')
                    }

                2) getDerivedStateFromProps 
                    The getDerivedStateFromProps method is called right before the render method.
                    This is the natural place to set the state object based on the initial props.
                    this method called every time whn state updates.

                    static getDerivedStateFromProps(props, state) {
                        return {  count : props.counting}
                    }
                   <App counting={1000}/>

                3) render
                    The render() method is required, and is the method that actually outputs the HTML to the DOM.
                    Compulsory method 
                    this method re-render every time when state and props update. 

                    render(){
                        return(
                            <h1>Hello render method</h1>
                        );
                    }
                
                4) componentDidMount 
                    The componentDidMount method is called once after the view is completely rendered.
                    Mostly this is used for api calling. 
                    it does not call when state updates. 

                    componentDidMount(){
                        console.log('componentDidMount ,metohd')
                    }

                practically on file src/componets/MountLifeCycleMethod.js

        2) Updating => A componet is updated whenever there is change in componet state or props. 
        react Has five built in methods that gets called in thus order whenever a componet is updated. 
            1) getDerivedStateFromProps() 
            2) shouldComponentUpdate ()
            3) render()
            4) getSnapShotBeforeUpdate() 
            5) componetDidUpdate()

                1) getDerivedStateFromProps()
                    same as mounting phase 
                    line : 498 
                
                2) shouldComponentUpdate 
                    In this method you can return a boolean value that specifies whether react should continue with the rendering or not . 

                    the default value is true 

                    shouldComponentUpdate (){
                        return false;
                    }

                    it will stop render method to rerender
                
                3) render();
                    same as mounting phase 
                    line : 508 
                
                4) getSnapShotBeforeUpdate
                    In this method you can access props , and state before the update , in short that even after the update , you can check the previous value or what the value before the update. 
                    If the getSnapShotBeforeUpdate method is present than you have to also include componetDidUpdate method otherwise it will give errors. 

                    getSnapShotBeforeUpdate (prevProps , prevState){
                        console.log('the previous state is: ' + prevState);
                    }
                
                5) componetDidUpdate 
                    this method is called after the componets is updated in the dom. 

                    componetDidUpdate (){
                        alert('the componetDidUpdate called')
                    }

            practically on file src/componets/UpdateLifeCycleMethod.js

        3) Unmounting => When a Component is removed from the dom it is called Unmounting. 
        react has one built in method that gets called when component is removed or Unmount.
        This method must be written in the component which have to be removed or Unmount. 

            1) componentWillUnmount()

                componentWillUnmount(){
                    alert('the child componet is removed')
                }

                practically on file src/componets/UnmountLifeCycleMethod.js
    
17. React Hooks => useEffect
    Hooks Are The Main Features Introduced in the react 16+ version. 
    It allows you to use state and react Features without writing a class componets. 
    Hooks does not works inside class comnponent. 
    Hooks should always be used at the top level of the of the react functions. 
    Hooks are the functions which HOOk into react state and lifecycles Features from functions componets . 

    1) useState 
        We use useState hooks for use state or setState Varaible inside functional componets. 
        example 

        import {useState} from 'react';

        function test(){
            const [ name, setName] = useState('tanu');
            return (
                <>
                    <h1> My name is {name}</h1>
                    <button onClick={()=>setName('Tanushri')}> Full Name </button>
                </>
            );
        }

    2) useEffect 
        We use useEffect Hooks for react lifecycles method inside functional componets.
        All lifecycles Method is in this one hook useEffect Hooks. 
        Combination of componentDidMount , componetDidUpdate, componentWillUnmount

        example => 
        useEffect(() => {
            console.log('call when component is mount and props and state updates')
        });

        useEffect(() => {
            console.log('only when count state updates')
        }, [count]);

        useEffect(() => {
            console.log('call only when component mount');
        },[]);
       
        practically on file src/componets/LifeCycleFunctionalCompuseEffect.js

18. Styles
    3 types of giving styling in react.
    1) External css 
    2) Internal Css or Inline Css 
    3) Modules Css 

    1) external css 
        create separate file
            style.css 
        and import in component file like 
            import './style.css';
        use like 
            <h1 className="heading"> Hello Everyone , External Css </h1>
        
    2) Inline Css 
        <h1 style={{color:'blue', backgroundColor:'black'}}> Inline Css </h1>

        Internal Css 
            const Styling = () => {
                const styles = {
                    color :'yellow',
                    backgroundColor:'purple'
                }

                return <h1 style={styles}> Internal Css </h1>
            }

    3) Modules Css 
        create Module css file like 
            style.module.css
        and import in component file like 
            import styleModules from './style.module.css'

        Use like 
        <h1 className={styleModules.success}> Module CSS</h1>

    practically on file src/componets/Styling.js

19) installation Bootstrap

    Install using npm 
        npm install react-bootstrap@next bootstrap@5.1.1
    
    Then Import In Main File index.js
        import 'bootstrap/dist/css/bootstrap.min.css';

    then use component like 
    first import 
        import { Button } from "react-bootstrap";
    and use
        <Button variant="primary">Primary</Button>

    practically on file src/componets/Bootstrap.js

20) Handle Array (loop an array)
    cannot Use foreach method inside react return Statement. 
    The map function returns an array of items and forEach just loop over them.
    In react We always Use map method to loop an array 

    const fruits = ['apple','mango','grapes'];
    return (
        {
            fruits.map((fruit,index)=>{
                return <h1 key={index}>{fruit}</h1>
            })
        }
    );

    practically on file src/componets/Looping.js

21) React Js send data from parent to child 
    Is is also Known as lifting state up 

    const Parent = () => {
        const handleEvent = (receiveData)=> {
            alert(receiveData)
        }
        return (
            <div>
                <h1>Hello i am parnet</h1>
                <Child handleEvent={handleEvent} />
            </div>
        )
    }
    const Child = (props) => {
        const data = 'Hello welcome from child component'
        return (
            <div>
                <h1>Hello i am child</h1>
                <button onClick={()=>props.handleEvent(data)}> Child Click</button>
            </div>
        )
    }

    Practically Example on file src/componets/Parent.js
    Practically Example on file src/componets/Child.js

22). Pure Component
        pure component used with class component.
        Pure Components in React are the components which do not re-renders when the value of state and props has been updated with the same values. If the value of the previous state or props and the new state or props is the same, the component is not re-rendered.

        import { PureComponent } from 'react';

        export default class PureComponents extends PureComponent {
            render(){
                
            }
        }

        practically Example on file => src/components/PureComponents.js

23) UseMemo Hook 
    use memo hook works same as PureComponent 
    we use PureComponent in class component 
    and for functional component we use usememo hooks 

    let memoFun = useMemo(function myFun(){
        return count * 20
    },[count])

    practically Example on file => src/components/UseMemoHook.js

24) Ref in React 
    When a ref is passed to an element in render, a reference to the node becomes accessible at the current attribute of the ref.

    with the help of ref you can manipulate dom element.

    example 
    practically Example on file => src/components/RefClassComp.js

25) useRef hooks 
    used in functional component to access dom element 

    example 
    practically Example on file => src/components/UseRefHook.js

26) Forward Ref
    used for forward ref from parent component to child component

    example 
    practically Example on file => src/components/ForwardRefHook.js
    practically Example on file => src/components/ForwardRefHookComp.js

27) Controlled Components 
    Controlled Components is one in which form or input field is controlled by state. 
    React Recommended controlled component to use. 

    example: 

    const [inputField, setinputField] = useState();

    <input type="text" value={inputField} onChange={(e)=>setinputField(e.target.value)} />

    practically Example on file => src/components/ControlledComponents.js

28) Uncontrolled Components
    Uncontrolled Components is one in which form or input field is controlled by ref or directly by dom manipulate. 

        const inputRef = useRef();

        const submitForm = (e) => {
            e.preventDefault();
            console.log(inputRef.current.value);
            let email = document.getElementById('emailId').value;
            console.log(email);
        }

        <form onSubmit={submitForm}>
            <input type="text" ref={inputRef} />
            <input type="email" id='emailId' />
            <input type="submit" value="Login" />
        </form>

    practically Example on file => src/components/UnControlledComponents.js

29) High Order Components 
    A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.

    A higher-order component is a function that takes a component and returns a new component.
    
    example on file 
    practically Example on file => src/components/HOC.js

30) React Routing 

    npm install react-router-dom

    now add browser router in index.js 

        import { BrowserRouter } from "react-router-dom";
        ReactDOM.render(
            <BrowserRouter>
                <App />
            </BrowserRouter>,
            document.getElementById("root")
        );

    Now add switch and route in main file 
    import { Route, Switch } from "react-router-dom";
      <Switch>
            <Route exact path="/"> <Home /></Route>
            <Route exact path="/about"> <About/></Route>
            <Route path="*"><PageNotFound /></Route>
        </Switch>

    Add Navigation links in navbar file 
    import { NavLink } from "react-router-dom";
        <nav>
            <ul>
                <li><NavLink exact to="/">Home</NavLink></li>
                <li><NavLink exact to="/about">About</NavLink></li>
            </ul>
        </nav>

        for dynamic routing 
        see file 
        src/components/Navbar.js and src/components/User.js

    practically Example on file => src/components/Navbar.js

31) API =
    install json server for free fake api for testing 
    npm i -g json-server 
    npm i json-server 

    now add script in package.json file 
        "json": "json-server --watch db.json --port 4000"

    now
    npm run json 
    and see 
    http://localhost:4000/blogs

    1) React Js Call Get Method API 
     1.fetch api data

            useEffect(() => {
                fetch("http://localhost:4000/blogs").then((res) => {
                    res.json().then((data) => {
                        //console.log(data)
                        setdata(data);
                    });
                });
            }, []);

    2. Post Api Method 

            const addBlog = () => {
                let data = { title, description };
                fetch("http://localhost:4000/blogs", {
                method: "POST",
                headers: {
                    'Accept': "application/json",
                    'Content-type': 'application/json',
                },
                body: JSON.stringify(data)
                }).then((res) => {
                    res.json().then((resp)=>{
                        console.log('response' + resp);
                    })
                });
            };

    3. Delete Api Method 

            const deleteBlog = (id) => {
                fetch(`http://localhost:4000/blogs/${id}`, {
                    method : 'DELETE'
                }).then((res)=>{
                    res.json().then((resp)=>{
                        console.log(resp)
                    })
                })
            }
        
    4. Put Api Method used for update data

        Note => difference Between Put And Patch method For update 
            PUT is a method of modifying resource where the client sends data that updates the entire resource . PATCH is a method of modifying resources where the client sends partial data that is to be updated without modifying the entire data.

        Put Api Call 
         //Prefilled Form when update 
            const updateBlog = (id) => {
                let details = data[id-1]
                setUserId(details.id)
                settitle(details.title)
                setdescription(details.description);
            };

        //update api called 
            const updateData = (id) => {
                let updatedData = {id, title, description}
                fetch(`http://localhost:4000/blogs/${userId}`, {
                method:'PUT',
                headers : {
                    'Accept' : 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(updatedData)
                }).then((result)=>{
                result.json().then((response)=>{
                    console.log(response);
                    getData();
                    settitle("");
                    setdescription("");
                })
                })
            }

    Practically Crud Example In file 
    src/Components/Api.js 

32) React Js Get the previous State in the functional components
    const [data, setDAta] = [0]
    setDAta((preState)=>{
        console.log(preState)
    })

    example 
    src/Components/PreviousStateFunction.js 

33) React Js Get previous Props in the functional Components 

    const PropsAnotherFun = (props) => {
        const preProps = useRef()
        useEffect(() => {
            preProps.current = props.count;
        })
        const previousProps =  preProps.current;

        return (
            <>
            <h1>Current Props value is {props.count}</h1>
            <h1>Previous Props value is {previousProps}</h1>
            </>
        )
    }
    example 
    src/Components/PreviousPropsFunction.js 

34) Context API 
    Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language.

    const MyContext = React.createContext(defaultValue);
        <MyContext.Provider value={/* some value */}>
            <Home />
        </MyContext.Provider>

        <MyContext.Consumer>
            {
                ({value})=>(
                   //use value here
                )
            }
        </MyContext.Consumer>

        For example go to 
        src/Components/Context.js 

35) All React Hooks in functional Components 
    1. useState 
    2. useReducer
    3. useEffect
    4. useRef
    5. useLayoutEffect
    6. useImperativeHandle or forwardRef
    7. useContext
    8. useMemo
    9. useCallback

    All Hooks use and Examples in 
    /src/components/AllHooks/Hooks.js

36) Questions and answers 
    1. What is react js? 
    ans=> React is a JavaScript library. use for frontend development with good speed. developed by facebook. THe current version is 17.0.2

    2. What is component? 
    ans=> A piece of code that can reuse like functions. but more powerful than function.2types: class and functional component.

    3. what is class component?
    ans=> A component that has ES6 class. More Complex and powerful than functional component. because it has a LifeCycle method and state. no needs to use hook.

    4. what is functional components?
    ans=> A component that has no es6 class. it uses a simple js function. simple and needs hooks for performing states and lifecycles methods. simple to define and Recommended. 

    5. what is state?
    ans=> information holder inside component and it store any data like a Varaible. when we update state component will rerender again but not in case of a variable. we can not use state outside of component.

    6. what is props?
    ans=> share data between components. We can send data parent to child , child to parent and in siblings component. We can not change props in receiving component.

    7. what is lifecycle method.
    ans=> some method will execute on the component mount, update, and unmount we call them lifecycle method. example= componentDidMount, componentDidMount, componentWillUnmount.

    8. what are the hooks?
    ans=> functional componets do not have state and lifecycle method. to use state and life cycle methods we can import hooks in functional componets. we cannot use hooks inside class componets.

    9. what are the useState?
    ans=> This is a hook for use state in functional components. Example
    const [data, setData] = React.useState('initial value');

    10. what is useEffect?
    ans=> this is a hook for use lifecycles methods in a functional components
    React.useEffect(()=>{
        //some work
    },[]) 

    11. what is npm?
    ans=> this is node package manager which helps us to install library in reactjs like map, form validation etc.
    npm i package-name 
    npm un package-name

    12. what is package.json?
    ans=> This file includes profile, application, details such as version, node package, description etc. 

    13. can we use react js without npm?
    ans=> yes we can use it like jquery also. for that we can import in it root file aur use cdn.

    14. what we need to develop react app?
    ans=> for the Recommended way we need npm , node, and any code editor. otherwise we can use CDN also.

    15. can we use typescript with reactjs?
    ans=> Yes , We can use typescript with reactjs. 

    16. can we use jquery , angular, and bootstrap with react js? 
    ans=> Yes we can, We can install packages for jquery and bootstrap. we can use react packages inside angular with npm install. 

    17. can we connect react with database directly?
    ans=> No,we need API for DB data. 

    18. what is SPA? 
    ans=> it stands for single page application with means application looks like single page and no need to refresh on jumping on other page and link. we can male single page application with reactjs, angular , vue . 

    19. what is jest? 
    ans=> Jest is a unit testing framework. jest is Recommended and easy to use with react js.

     Official link of React Js documentation 
     https://reactjs.org/docs/getting-started.html

---------------------------------------------------End--------------------------------------------------------------