------------- React Js From Beginer To Advanced ----------

1. Introduction 
    React js is a JavaScript library for building user interfaces.
    React is used to build single page applications. 
    React Allows us to create reusable bit of code/components. 
    React Was build By facebook. 
    The main focus is to building UI as fast as possible. 
    React Uses Virtual DOM. 
    React Runs on Default port localhost:3000 
    First Released on 29th may 2013. 

2. prerequisite before learn react js
    Before you can code using React, you must have basic knowledge of :
    1) HTML 
    2) CSS 
    3) JavaScript 
    4) ES6 
    5) NPM or YARN 

    Note => Node Js And Npm Must Be installed in your pc to getting started with react. 
    Also git bash should be installed.

3. CMD basics commands or NPM basics commands 
    let's discuss some important cmd or npm commands 
    1) CMD commands 
        1. PWD
            full pathname of working directory 
        2. LS 
            list of directory 
        3. MKDIR 
            create directory 
        4. CD 
            change directory 
        5. CD..
            one level up directory 
        6. clear 
            clean the terminal 
        7. Arrow key up / down 
            previous commands 
        
    2) NPM commands 
        1. NPM init 
            create package.json file 
        2. Npm install <package-name> --save 
            Install package locally 
        3. npm install <package-name> -g 
            install package globaally (sudo)
        4. npm install <package-name> --save-dev 
            use only in development mode 
    
4. React js without installation using cdn links  
    Add Links in Head Tags 
    <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>

    Now in Script you can write React like this-
    
    <script type="text/babel">
        function App (){
            return ( <h2> Hello world </h2>);
        }
        ReactDOM.render(<App />, document.getElementById('root'))
    </script>

    Note => This way is not for project development this is only for learning purpose 
    for use of project we will use create-react-app installation process. 
    CDN Links is not Recommended this is only for testing purpose. 

5. React Js installation (create-react-app) 
    For install globally create react app command 
    npm install -g create-react-app 

    for checking version installed in your pc use 
    create-react-app --version 

    create a react app directly 
    create a directory inside your working folder run create app command for create an react app like: 

    npx create-react-app ecommerce-app 
    cd ecommerce-app 
    yarn start 

    it will create a react app names as ecommerce-app 
    by yarn start 
    it will start serve on localhost:3000 

6. File Structure 
    1) Node Modules 
        node Modules contain all the required packages. 
    2) Public Folder 
        public folder contain a root html file. (index.html) and favicons etc. 
        starting Public file =>         public/index.html
    3) src Folder 
        src folder is our main folder where we will start our works 
        All Logic Files Comes Inside This Folder . 
        We will write our code in src folder. 
        starting logic file is =>       src/index.js
    4) .gitignore
        this file is used to ignore file when push code on github 
    5) package.json 
        it contains all required dependency and versions. 
    6) README.md 
        it is just a text file used for github code push.
    7) yarn.lock  
       it contains all required dependency and versions in packages information in detail.
    
7. Clean Boiler plate and understanding main logic file which is src/index.js
    delete all files in public folder except index.html 
    now in index.html files remove all unnecessary comments and unneceesary links tag. 
    inside index.html file there is a div with id root 
     
        <div id="root">
        
        </div>

    now delete all files in src folder 

    now we need a main logic file inside our src folder which is index.js 
    so create index.js inside src folder. 
    this is our main logic file . 

    src/index.js

            //1. import area 
            //Formula :
            //import something from 'something';
            import React from 'react';
            import ReactDOM from 'react-dom';

            //2. components area 
            function App(){
                return <h1> Hello world</h1>
            }

            //3. object.method 
            ReactDOM.render( <App />, document.getElementById('root'));

            note: this document.getElementById('root') root comes from public/index.html file.

8. Components In React 
    1. Components Are independent and reusable Bit of Code.
    2. Components always return JSX (html).
    3. It only return single element.
    4. Components Name must be in pascal case as PascalCase
    5. We don't want to mash all the code in one file. that's y we create separate components .
    
    There are mainly two types of components 
    1) Functional components or Arrow Functional components 
    2) Class components 

        1) Functional Components 
            Functional components functions s bnte s 
            and it always return jsx. 

        for example Functional component 
        now create a componets App.js

            function App(){
                return <h1> Hello world</h1>
            }
            export default App;

        and import this code in index.js file 

            import App from './App';
            ReactDOM.render( <App />, document.getElementById('root'));

        for example Arrow Functional Components 
            const App = () => {
                return <h1> Hello world</h1>
            }
            export default App;

            if return only single element then no need to write return keyword in arrow function. 
             const App = () => <h1> Hello world</h1>
            export default App;

        2) Class Components 
            class components class s bnte h. 
            there must be a render method in class component 
            render method always return JSX (html)

                class App extends React.Component {
                    render(){
                        return (
                            <h1> Hello world</h1>
                        );
                    }
                }
                export default App;

            If using Constructor then there must be called super method . 
                class App extends React.Component {
                    constructor (){
                        super();
                        console.log('hello i am construtor')
                    }
                    render(){
                        return (
                            <h1> Hello world</h1>
                        );
                    }
                }
                export default App;

9. Nested Components And Import And Export 
    Components Can contain Other Components as parent child this is called Nested Components.
        for create components create a separate components folder inside src folder
        and keep all your components in separate components folder 

        //Nested  Components Example 

        function One () {
            return (
                <div>
                    <h1>I am One</h1>
                    <Two />                 //this is called nested components
                </div>
            );
        }

        function Two(){
            return (
                <div>
                    <h1>I am Two</h1>
                </div>
            );
        }

        export default One;

        Import And Export---

        1) Default Export ko kisi bhi name s import kar skte hai 
        for example 
            export default Home; 
            now import in another page as
            import HomePage from './Home'; 

            use this component like 
            <HomePage />
                or 
            also use like 
            <HomePage></HomePage> 

        2) Named Export ko curly braces m same name s likh k access kia jata h 
        for example 
            export { Home };
            now import in another page as 
            import { Home } from './Home';   

            use this component like 
            <Home />   
                or 
            also use like 
            <Home></Home> 

10. JSX 
    JavaScript And XML (extensible markup language)
    Rules= 
        1. Must contain A closing Tag of all element.
            example
            <img src="" alt >               //this is wrong we can not use this
            <img src="" alt="" />           //this is right bcoz it have closing tag

        2. return single element like div , section, article, react fragment or <></>
            example 
                //This is Wrong we can only return single element 
                function AboutJsx() {
                    return (
                        <h1>Hello jsx</h1>
                        <h2>Welcome</h2>
                    )
                }

                //This is Right we can only return single element 
                function AboutJsx() {
                    return (
                        <React.Fragment>
                            <h1>Hello jsx</h1>
                            <h2>Welcome</h2>
                        </React.Fragment>
                   )
                }

                //one parent inside a parent there must be so many element
                // we can wrap all with <div></div>
                 or <React.Fragment></React.Fragment>
                 or syntactic sugar form of react fragment is 
                 <> all element inside it </>

            What is React Fragment 
                A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra div to the DOM.
                
        3. use camelCase for Html attribute 
            for example 
            <button onclick="alert('hello ')"> Click Me</button>        //wrong
            <button onclick={ alert('hello')}> Click Me</button>        //right

        4. className instead of class. 
            <h1 class="heading">Helloo</h1>             //wrong
            <h1 className="heading">Helloo</h1>         //right

        5. react internally uses JSX which uses babel to convert js.
        6. JSX means write Html and js together. 
        7. Write JavaScript inside expressions which is curly braces { 5 + 5 }

11. Events In JavaScript 
    React can perform action based on user events. 
    React has the same events as html onClick, onChange, onMouseEnter , onDoubleClick etc.
    React Events are written in camelCase syntx. 
    React Event Handlers are written inside curly braces.
        for example 

        const sendData = () => {
            alert('button is clicked');
        }

        <button onclick={ sendData }> Click Me </button>
            or 
        <button onClick={()=>sendData()}> Click Me </button>
            or 
        <button onClick={()=>alert('button is clicked')}> Click Me </button>

12. Props and state in functional components 
    Props are arguements / parameterd passed into react component. 
    Props are used to pass data from a parent component to child component.
    Props are read only.
    props is immutable.

    example of props in functional components are- 
        const Cards = (props) => {
            return (
                <div>
                    <h1>name : {props.name} </h1>
                    <h2>Email : {props.email}</h2>
                </div>
            )
        }
        export default Cards;

        {/* props */}
        <Cards name={'xyz'} email={'xuz@gmail.com'}/>
        <Cards name={'rim'} email={'rim@gmail.com'}/>

    State Data can be modified by its own component. but its private cannot be accessed from outside.
    when state change the comnponent re-render.
    state is mutable.

    example of state in functional components
        using hook useState 

        import React, {useState} from 'react';

        function MyComp () {
            const [count, setCount] = useState(0);

            return (
                <>
                    <h1> { count }</h1>
                    <button onClick={()=> setCount(count + 1)}> Update Num</button>
                </>
            );
        }
        export default MyComp;

13. Props and state in class components 
        example of props in class components are- 

            export default class PropStateClassComp extends Component {
                render(){
                    console.log(this.props);
                    return (
                        <h1>name : {this.props.name} </h1>
                        <h2>Email : {this.props.email}</h2>
                    );
                }
            }

            {/* props in class component */}
            <PropStateClassComp  name={'xyz'} email={'xuz@gmail.com'} />
            <PropStateClassComp  name={'1234567'} email={'chawin@gmail.com'} />

        example of state in class components
            export default class PropStateClassComp extends Component {
                constructor(){
                    super();
                    this.state = {
                        count : 0
                    }
                }
                render(){
                    return (
                        <h1> {this.state.count} </h1>
                        <button onClick={()=> this.setState({ count : this.state.count+1})}> increment Num</button>
                    );
                }
            }

14. Conditional Statements or ternary operator 
    check if else Conditional using ternary operator like 

        const [isLoggedIn, setisLoggedIn] = useState(false)
        return (
            {
                isLoggedIn ? <h1> Welcome To Dashboard </h1> : <h1> kindly login </h1>
            }
        );

    for detail example see file : components/Conditional.js

15. Form Handling in React 
    Just like in HTML, React Uses forms to allow users to interact with the web page.

    for get value of input box we uses onChange event 
    for storing value we use useState
    for example => 

    const [inputValue, setInputValue] = useState(null);
    <input type="text" onChange={ (event)=>setInputValue(event.target.value)} value={inputValue} />


    2) Print Value onSubmit form--

        import { useState } from 'react'

        export default function Form() {
            const [email, setemail] = useState('');
            const [password, setpassword] = useState('');

            const [showData, setShowData] = useState({emailAdd:'', mypassword:''})

            // stop form from submit on button click 
            const onSubmitForm = (event) => {
                event.preventDefault();
            }

            //show data on submit when button clicked
            const submittedData = () => {
                setShowData({
                    emailAdd: email,
                    mypassword : password
                })
                setpassword('')
                setemail('')
            }
            return (
                <>
                    <h1>Your email is {showData.emailAdd} and password is {showData.mypassword}</h1>

                    <form onSubmit={ onSubmitForm}>
                        <label htmlFor="email"> User Email</label>
                        <input type="email" id="email" onChange={(e)=>setemail(e.target.value)} value={email} />
                        <label htmlFor="password">Password</label>
                        <input type="password" id="password" onChange={(e)=>setpassword(e.target.value)} value={password}/>
                        <button onClick={submittedData}>submit</button>
                    </form>
                </>
            )
        }

    3)Complex Form Multiple field
        Use only One State Varaibles To manage All input field.

        See file ComplexForm.js 
        src/components/ComplexForm.js 
        for know in details about complex form Handling
    
16. React LifeCycle Method . 























     Official link of React Js documentation 
     https://reactjs.org/docs/getting-started.html

---------------------------------------------------End--------------------------------------------------------------